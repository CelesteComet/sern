'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.resolveStoryHierarchy = resolveStoryHierarchy;
exports.createHierarchy = createHierarchy;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function fillHierarchy(namespaces, hierarchy, story) {
  if (namespaces.length === 1) {
    var _namespace = namespaces[0];
    var _childItems = hierarchy.map.get(_namespace) || [];

    _childItems.push(story);
    hierarchy.map.set(_namespace, _childItems);
    return;
  }

  var namespace = namespaces[0];
  var childItems = hierarchy.map.get(namespace) || [];
  var childHierarchy = childItems.find(function (item) {
    return item.isNamespace;
  });

  if (!childHierarchy) {
    childHierarchy = {
      isNamespace: true,
      name: namespace,
      namespaces: [].concat((0, _toConsumableArray3.default)(hierarchy.namespaces), [namespace]),
      firstKind: story.kind,
      map: new _map2.default()
    };

    childItems.push(childHierarchy);
    hierarchy.map.set(namespace, childItems);
  }

  fillHierarchy(namespaces.slice(1), childHierarchy, story);
}

function resolveStoryHierarchy() {
  var storyName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var hierarchySeparator = arguments[1];

  if (!hierarchySeparator) {
    return [storyName];
  }

  return storyName.split(new RegExp(hierarchySeparator));
}

function createHierarchy(stories, hierarchySeparator) {
  var hierarchyRoot = {
    isNamespace: true,
    namespaces: [],
    name: '',
    map: new _map2.default()
  };

  if (!stories) {
    return hierarchyRoot;
  }

  var groupedStories = stories.map(function (story) {
    var namespaces = resolveStoryHierarchy(story.kind, hierarchySeparator);

    return (0, _extends3.default)({
      namespaces: namespaces,
      name: namespaces[namespaces.length - 1]
    }, story);
  });

  groupedStories.forEach(function (story) {
    return fillHierarchy(story.namespaces, hierarchyRoot, story);
  });

  return hierarchyRoot;
}