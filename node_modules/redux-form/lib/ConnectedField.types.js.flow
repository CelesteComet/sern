// @flow
import type { Event, Context } from './types'
import type { Component as ReactComponent } from 'react'

export type InstanceApi = {
  name: string,
  getRenderedComponent: { (): ReactComponent<*, *, *> },
  isPristine: { (): boolean },
  getValue: { (): any }
} & ReactComponent<*, *, *>

export type Props = {
  name: string,
  component: Function | string,
  withRef?: boolean,
  _reduxForm: Context,

  // same as Props in createFieldProps.js:
  asyncError: any,
  asyncValidating: boolean,
  onBlur: { (event: Event, newValue: ?any, previousValue: ?any): void },
  onChange: { (event: Event, newValue: ?any, previousValue: ?any): void },
  onDrop: { (event: Event, newValue: ?any, previousValue: ?any): void },
  onDragStart: { (event: Event): void },
  onFocus: { (event: Event): void },
  dirty: boolean,
  dispatch: { (action: any): void },
  form: string,
  format?: { (value: any, name: string): any },
  initial: any,
  parse?: { (value: any): any },
  normalize?: { (value: any): any },
  pristine: boolean,
  props?: Object,
  state: any,
  submitError?: string,
  submitFailed: boolean,
  submitting: boolean,
  syncError?: any,
  syncWarning?: any,
  value: any,
  _value: any
}
